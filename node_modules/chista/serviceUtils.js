'use strict';

exports.__esModule = true;

let runService = (() => {
    var _ref = _asyncToGenerator(function* (serviceClass, { context = {}, params = {}, logger = _consoleLogger2.default }) {
        function logRequest(type, result, startTime) {
            logger(type, {
                service: serviceClass.name,
                runtime: Date.now() - startTime,
                params: (0, _util.inspect)(params, { showHidden: false, depth: null }),
                result
            });
        }

        const startTime = Date.now();

        try {
            const result = yield new serviceClass({ context }).run(params);

            logRequest('info', JSON.stringify(result), startTime);

            return result;
        } catch (error) {
            const type = error instanceof _Exception2.default ? 'info' : 'error';

            logRequest(type, error, startTime);

            throw error;
        }
    });

    return function runService(_x, _x2) {
        return _ref.apply(this, arguments);
    };
})();

let renderPromiseAsJson = (() => {
    var _ref3 = _asyncToGenerator(function* (req, res, promise, logger = _consoleLogger2.default) {
        try {
            const data = yield promise;

            data.status = 1;

            return res.send(data);
        } catch (error) {
            /* istanbul ignore next */
            if (error instanceof _Exception2.default) {
                res.send({
                    status: 0,
                    error: error.toHash()
                });
            } else {
                logger('error', {
                    'REQUEST_URL': req.url,
                    'REQUEST_PARAMS': req.params,
                    'REQUEST_BODY': req.body,
                    'ERROR_STACK': error.stack
                });

                res.send({
                    status: 0,
                    error: {
                        code: 'SERVER_ERROR',
                        message: 'Please, contact your system administartor!'
                    }
                });
            }
        }
    });

    return function renderPromiseAsJson(_x5, _x6, _x7) {
        return _ref3.apply(this, arguments);
    };
})();

var _util = require('util');

var _Exception = require('./Exception');

var _Exception2 = _interopRequireDefault(_Exception);

var _consoleLogger = require('./consoleLogger');

var _consoleLogger2 = _interopRequireDefault(_consoleLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function makeServiceRunner(serviceClass, paramsBuilder, contexBuilder, logger = _consoleLogger2.default) {
    return (() => {
        var _ref2 = _asyncToGenerator(function* (req, res) {
            const resultPromise = runService(serviceClass, {
                logger,
                params: paramsBuilder(req, res),
                context: contexBuilder(req, res)
            });

            return renderPromiseAsJson(req, res, resultPromise, logger);
        });

        function serviceRunner(_x3, _x4) {
            return _ref2.apply(this, arguments);
        }

        return serviceRunner;
    })();
}

exports.default = {
    makeServiceRunner,
    runService,
    renderPromiseAsJson
};